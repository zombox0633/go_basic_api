package basicService

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"

	"github.com/zombox0633/api/constraints"
	"github.com/zombox0633/api/middleware"
	"github.com/zombox0633/api/utils"
)

// Func ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ auto id
// ‡πÇ‡∏î‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö -1 ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ id ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
// ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ô‡∏≥‡∏°‡∏≤ loop for ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PetList
// ‡∏ã‡∏∂‡πà‡∏á‡∏ñ‡πâ‡∏≤ highestId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ pet.Id ‡∏Å‡πá‡∏à‡∏∞‡πÉ‡∏´‡πâ highestId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö pet.Id
// ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡∏ß‡∏ô‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ highestId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ pet.Id
// ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏∞‡πÉ‡∏´‡πâ highestId + 1
func getNextID() int {
	highestId := -1
	for _, pet := range constraints.PetList { //range ‡πÉ‡∏ä‡πâ‡∏ß‡∏ô‡∏•‡∏π‡∏õ ‡∏ú‡πà‡∏≤‡∏ô slice, array, map, channel ‡∏´‡∏£‡∏∑‡∏≠ string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠ key ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
		if highestId < pet.Id {
			highestId = pet.Id
		}
	}
	return highestId + 1
}

// Func ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å id ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
// return ‡∏≠‡∏≠‡∏Å 2 ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∑‡∏≠ ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ñ‡∏∑‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ pointer ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÉ‡∏ô PetList ‡πÅ‡∏•‡∏∞ index ‡∏Ç‡∏≠‡∏á pat
func findPetById(id int) (*constraints.PetType, int) { // *üò∫ ‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á return ‡πÄ‡∏õ‡πá‡∏ô Pet (‡∏Ñ‡πà‡∏≤‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ï‡∏±‡∏ß) ‡πÅ‡∏•‡∏∞ PetList (‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß)
	for i, pat := range constraints.PetList {
		if pat.Id == id {
			return &pat, i
		}
	}
	return nil, -1 //‡πÉ‡∏™‡πà -1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô PetList
}

func deletePetByID(id int) error {
	_, index := findPetById(id)
	if index == -1 {
		return fmt.Errorf("pet not found")
	}

	//constraints.PetList[:index] ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö ‡πÅ‡∏•‡∏∞ constraints.PetList[index+1:] ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
	constraints.PetList = append(constraints.PetList[:index], constraints.PetList[index+1:]...)
	return nil
}

func petByIDHandler(w http.ResponseWriter, r *http.Request) {
	//‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î url ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô ‡πÜ ‡∏à‡∏≤‡∏Å http://localhost:5000/pet/id ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ñ‡πà‡∏≤ ["http://localhost:5000/","id"]
	segment := strings.Split(r.URL.Path, "pet/")

	// urlPathSegment[len(urlPathSegment)-1] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô array ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏±‡∏ß id
	//‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏≠‡∏≤ id ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô int ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á strconv.Atoi()
	id, err := strconv.Atoi(segment[len(segment)-1])

	if err != nil {
		log.Print(err)
		//‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÉ‡∏´‡πâ HandleWriteHeader ‡∏™‡πà‡∏á error ‡πÉ‡∏´‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡∏ß utils ‡πÄ‡∏≠‡∏¥‡∏ó‡∏ó‡∏≥‡πÄ‡∏≠‡∏á
		utils.ErrorHandle(w, err, http.StatusNotFound)
		return
	}
	pet, index := findPetById(id)
	if index == -1 {
		utils.ErrorHandle(w, fmt.Errorf("invalid URL"), http.StatusNotFound)

		return
	}

	switch r.Method {
	// get by id
	case http.MethodGet:
		// ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
		// petJson, err := json.Marshal(pet) //‡∏ô‡∏≥‡∏Ñ‡πà‡∏≤ pet ‡∏°‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô json
		// utils.HandleWriteHeader(w, err, http.StatusNotFound)
		// w.Header().Set("Content-Type", "application/json")
		// w.Write(petJson)

		w.Header().Set("Content-Type", "application/json")

		//json.NewEncoder() ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏õ‡∏•‡∏á Go struct ‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞ ‡∏™‡∏£‡πâ‡∏≤‡∏á encoder ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô JSON ‡∏•‡∏á‡πÉ‡∏ô io.Writer
		// ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡∏á Go struct (pet) ‡πÄ‡∏õ‡πá‡∏ô JSON
		if err := json.NewEncoder(w).Encode(pet); err != nil {
			utils.ErrorHandle(w, err, http.StatusInternalServerError)
		}

	//‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pet ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ id
	case http.MethodPut:
		var updatePet constraints.PetType

		//‡∏ï‡∏±‡∏ß ioutil.ReadAll ‡∏ñ‡∏π‡∏Å deprecated  ‡∏à‡∏∂‡∏á‡πÉ‡∏ä‡πâ  io.ReadAll()
		body, err := io.ReadAll(r.Body)
		if err != nil {
			utils.ErrorHandle(w, err, http.StatusBadRequest)
			return
		}
		defer r.Body.Close()

		//‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ json ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô struct
		if err := json.Unmarshal(body, &updatePet); err != nil {
			utils.ErrorHandle(w, err, http.StatusBadRequest)
			return
		}

		//‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö id ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô URL ‡∏à‡∏∞ error
		if updatePet.Id != id {
			utils.ErrorHandle(w, fmt.Errorf("ID mismatch"), http.StatusBadRequest)
			return
		}

		constraints.PetList[index] = updatePet

		w.Header().Set("Content-Type", "application/json")
		// json.Marshal() + w.Write()  ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô JSON ‡∏•‡∏á w ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
		if err := json.NewEncoder(w).Encode(updatePet); err != nil {
			utils.ErrorHandle(w, err, http.StatusInternalServerError)
		}

	case http.MethodDelete:
		if err := deletePetByID(id); err != nil {
			utils.ErrorHandle(w, err, http.StatusNotFound)
			return
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(map[string]string{
			"message": fmt.Sprintf("Pet with ID %d deleted successfully", id),
		})

	default:
		//405 Method Not Allowed
		utils.ErrorHandle(w, fmt.Errorf("method not allowed"), http.StatusMethodNotAllowed)

	}

}

// Func Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Method CRUD
func petHandler(w http.ResponseWriter, r *http.Request) {
	//‡πÅ‡∏õ‡∏•‡∏á PetList ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Json
	petJson, err := json.Marshal(constraints.PetList)

	switch r.Method {
	//method GET
	case http.MethodGet:
		utils.ErrorHandle(w, err, http.StatusInternalServerError)

		//‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ set Header ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö json
		w.Header().Set("Content-Type", "application/json")
		//‡πÉ‡∏ä‡πâ Write ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Json ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
		w.Write(petJson)
		return

		//method POST
	case http.MethodPost:
		//‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		var newPet constraints.PetType

		//‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏• body ‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡πà‡∏≤‡∏ô request ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô body ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
		body, err := io.ReadAll(r.Body)
		utils.ErrorHandle(w, err, http.StatusBadRequest)

		//‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤ Json ‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å body ‡πÄ‡∏õ‡πá‡∏ô struct ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô newPet
		err = json.Unmarshal(body, &newPet)
		utils.ErrorHandle(w, err, http.StatusBadRequest)

		//‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î error ‡∏Å‡πá‡∏à‡∏∞‡πÇ‡∏¢‡∏ô error ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÉ‡∏´‡πâ
		if newPet.Id != 0 {
			utils.ErrorHandle(w, err, http.StatusBadRequest)
		}

		//‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà error ‡∏Å‡πá‡∏à‡∏∞‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° newPet ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô PetList
		//‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î auto id ‡∏ú‡πà‡∏≤‡∏ô func getNextID
		newPet.Id = getNextID()
		constraints.PetList = append(constraints.PetList, newPet)
		w.WriteHeader(http.StatusCreated)
		w.Write([]byte("Pet added successfully!"))
		return
	}

}

func WorkRequest() {
	fmt.Println("Registering Handlers...")

	//‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® path ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô handler(Function ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á method ‡∏ï‡πà‡∏≤‡∏á‡πÜ)
	//‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô middleware
	http.HandleFunc("/pet", middleware.LoggingMiddleware(petHandler))

	//‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠ path by id
	http.HandleFunc("/pet/", middleware.LoggingMiddleware(petByIDHandler))
}
